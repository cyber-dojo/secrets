name: Daily Check for new/expiring GitHub secrets

on:
  push:
  schedule: # At 04:00 every weekday
    - cron: '0 04 * * 1-5'

env:
  KOSLI_ORG: cyber-dojo  # Org name in https://app.kosli.com
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}
  KOSLI_API_TOKEN: '${{ secrets.KOSLI_API_TOKEN }}'
  KOSLI_FLOW: ${{ vars.KOSLI_SECRETS_FLOW }}
  KOSLI_TRAIL: "secrets-check-${{ github.run_number }}"
  API_SECRETS_FILENAME: api_secrets.json
  BLENDED_FILENAME: blended_secrets.json
  GIT_CLONE_DIR: /tmp/cyber-dojo-repos
  GITHUB_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        run:
          kosli create flow "${KOSLI_FLOW}"
            --description="Kosli new/expiring secrets check"

      - name: Begin Kosli Trail
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli begin trail "${KOSLI_TRAIL}"
            --template-file=.kosli.yml

  pull-request:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      id-token:      write
      contents:      read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        run:
          kosli attest pullrequest github
            --github-token=${{ secrets.GITHUB_TOKEN }}
            --name=pull-request

  check-secrets:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Run the tests
        run:
          make test_secrets

      - name: Attest test evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli attest junit
            --name=unit-tests
            --results-dir=./evidence

      - name: Add Org secrets to API_SECRETS_FILENAME
        env:
          LIST_ORG_AND_REPO_SECRETS: ${{ secrets.LIST_ALL_SECRETS }}
        run:
          ./bin/github_api_curl.sh "${LIST_ORG_AND_REPO_SECRETS}" "orgs/${KOSLI_ORG}/actions/secrets" > "${API_SECRETS_FILENAME}"

      - name: Add Repo secrets to API_SECRETS_FILENAME
        env:
          GH_TOKEN: ${{ secrets.READ_ALL_REPOS }}
          LIST_ORG_AND_REPO_SECRETS: ${{ secrets.LIST_ALL_SECRETS }}
        run: |
          for REPO_NAME in $(gh repo list "${KOSLI_ORG}" --no-archived --limit 500 --json name --jq '.[].name' | grep -v '.github'); do
            OUTPUT_FILE=$(mktemp)
            ./bin/github_api_curl.sh "${LIST_ORG_AND_REPO_SECRETS}" "repos/${KOSLI_ORG}/${REPO_NAME}/actions/secrets" > "${OUTPUT_FILE}"                        
            jq -nc --slurpfile repo "${OUTPUT_FILE}" --arg repo_name $REPO_NAME '{repo: {$repo_name: $repo[0]}}' > temp.json
            jq -s '.[0] * .[1]' "${API_SECRETS_FILENAME}" temp.json > new_temp.json
            mv new_temp.json "${API_SECRETS_FILENAME}"
          done

      - name: Combine data from Github API secrets and .txt files
        run: |
          TXT_ROOT=./txt_root
          DATE_TODAY=$(date +"%Y-%m-%d")
          ./bin/blend_secrets.py "${API_SECRETS_FILENAME}" "${TXT_ROOT}" "${DATE_TODAY}" > "${BLENDED_FILENAME}"

      - name: Attest combined data to Kosli
        if: ${{ github.ref == 'refs/heads/main' && (success() || failure()) }}
        run:
          kosli attest custom
            --type=secrets
            --name=blended-secrets
            --attestation-data="${BLENDED_FILENAME}"   

      - name: Find the secrets needing attention
        run: |
          {
            echo "SECRETS_NEEDING_ATTENTION<<EOF"
            ./bin/filter_secrets.py "${BLENDED_FILENAME}"
            echo "EOF"
          } >> ${GITHUB_ENV} 

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      - name: Clone repos containing secrets needing attention
        if: ${{ env.SECRETS_NEEDING_ATTENTION != '[]' }}
        env:
          SECRETS_NEEDING_ATTENTION: "${{ env.SECRETS_NEEDING_ATTENTION }}"
        run: |
          AUTH=$(echo -n "x-access-token:${{ secrets.READ_ALL_REPOS }}" | openssl base64 | tr -d '\n')
          mkdir "${GIT_CLONE_DIR}"
          cd "${GIT_CLONE_DIR}"
          REPOS="$(jq --raw-output '.[] | .repo' <<< "${SECRETS_NEEDING_ATTENTION}" | sort | uniq)"          
          echo "${REPOS}" | while read repo; do
             REPO_URL="https://github.com/${KOSLI_ORG}/${repo}/"
             git -c "http.${REPO_URL}.extraheader=Authorization: Basic ${AUTH}" clone "${REPO_URL}" --depth=1
          done          

      - name: Add information on how often repo secrets are used in repo workflows
        run: |
          {
            echo "SECRETS_NEEDING_ATTENTION<<EOF"
            ./bin/filter_secrets.py "${BLENDED_FILENAME}" "${GIT_CLONE_DIR}"
            echo "EOF"
          } >> ${GITHUB_ENV}

      - name: Create Github step summary that some secrets need attention
        if: ${{ env.SECRETS_NEEDING_ATTENTION != '[]' }}
        env:
          SECRETS_NEEDING_ATTENTION: "${{ env.SECRETS_NEEDING_ATTENTION }}"
        run: |
          TEMP_FILENAME=/tmp/filtered_secrets.json
          echo "${SECRETS_NEEDING_ATTENTION}" > "${TEMP_FILENAME}"
          {
            echo "# Daily check of Cyber-Dojo Github secrets"
            echo "[ðŸ“– Instructions](https://github.com/cyber-dojo/secrets/blob/main/docs/README.md)"
            echo
            ./bin/print_filtered_secrets_summary.py "${TEMP_FILENAME}" 
          } >> "${GITHUB_STEP_SUMMARY}"

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      - name: Send Slack message that no secrets need attention
        if: ${{ env.SECRETS_NEEDING_ATTENTION == '[]' }}
        uses: ./.github/actions/send-slack-message
        with:
          slack_url: "${{ secrets.SLACK_WEBHOOK_URL }}"
          message: "No Cyber-Dojo Github Secrets Need Attention :-)"

      - name: Send Slack message that some secrets need attention
        if: ${{ env.SECRETS_NEEDING_ATTENTION != '[]' }}
        uses: ./.github/actions/send-slack-message
        with:
          slack_url: "${{ secrets.SLACK_WEBHOOK_URL }}"
          message: "New/expiring Github secrets need attention.\nSee ${GITHUB_RUN_URL}"

      - name: Send Slack error message
        if: failure()
        uses: ./.github/actions/send-slack-message
        with:
          slack_url: "${{ secrets.SLACK_WEBHOOK_URL }}"
          message: "Workflow failed.\nSee ${GITHUB_RUN_URL}\nCommon causes:\nâ€¢ Expired GitHub tokens\nâ€¢ API rate limits\nâ€¢ Script errors"
